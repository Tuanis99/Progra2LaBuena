package UI;
import static UI.pantallaInicial.correoElectronico;
import static UI.pantallaInicial.tamañoDisco;
import static UI.pantallaInicial.totalParticiones;
import Estructuras.AVLTree;
import Estructuras.AVLTree.NodeAVL;
import java.util.Scanner;
import progrados.Archivos;
import progrados.Carpetas;
import progrados.Comandos;
//import progrados.createFile;
import progrados.prograDos.*;
import static progrados.prograDos.listaParticiones;
    public class menuInicial extends javax.swing.JFrame {

    public menuInicial() {
        initComponents();
    }
    // Recordar que para utilizar genericos se realiza LinkedList <Particiones> nuevaParticion = new LinkedList <Particiones>;
        static int espacioTotal = Integer.parseInt(tamañoDisco.getText());
        static int espacioLibre = Integer.parseInt(tamañoDisco.getText());
        static int particionesTotales = Integer.parseInt(totalParticiones.getText());
        //static int totaldeParticiones = 0;
        String correoUsuario = correoElectronico.getText();
        public static String comando;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton3.setText("Consultar cantidad de particiones y sus tamaños");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Crear nueva partición");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Eliminar partición");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Modificar partición");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Ver particiones gráficamente");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton6)
                    .addComponent(jButton3))
                .addContainerGap(291, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addContainerGap(343, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Particiones", jPanel2);

        jButton8.setText("Visualizar gráficamente árbol de archivos");

        jButton10.setText("Compresión de archivos");

        jButton11.setText("Observar espacio consumido en el disco duro");

        jButton12.setText("Archivos ordenados por espacio en el disco duro");

        jButton14.setText("Mover de carpeta");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Copiar archivo a nuevo directorio");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Mover directorio completo");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Mover directorio entero");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Eliminar directorio");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Desplegar archivos");

        jButton20.setText("Desplegar archivos del directorio seleccionado");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("Crear nuevo archivo");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setText("Eliminar archivo");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Cambiar nombre de archivo/directorio");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton25.setText("Subir archivo a la nube");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton30.setText("Utilizar comandos");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton9.setText("Imprimir arbol en consola");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton31.setText("Crear archivo e ingresar en el arbol");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton32.setText("Crear directorio");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8)
                            .addComponent(jButton12)
                            .addComponent(jButton20)
                            .addComponent(jButton15)
                            .addComponent(jButton16)
                            .addComponent(jButton17)
                            .addComponent(jButton11)
                            .addComponent(jButton23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton19, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton21, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton22, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton18, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton31, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton32, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton25)))
                .addGap(42, 42, 42))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton14)
                        .addGap(18, 18, 18)
                        .addComponent(jButton21)
                        .addGap(18, 18, 18)
                        .addComponent(jButton22)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton19)
                            .addComponent(jButton16))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10)
                            .addComponent(jButton17)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton18)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton20)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12)
                        .addGap(18, 18, 18)
                        .addComponent(jButton15)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton32)
                    .addComponent(jButton11))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton31)
                    .addComponent(jButton23))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9)
                    .addComponent(jButton25))
                .addGap(68, 68, 68)
                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Archivos", jPanel3);

        jButton26.setText("Crear archivo de texto");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setText("Contar palabras de un archivo de texto");

        jButton29.setText("Enviar archivo al correo");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jButton27))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jButton26))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jButton29)))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButton26)
                .addGap(49, 49, 49)
                .addComponent(jButton27)
                .addGap(44, 44, 44)
                .addComponent(jButton29)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Editor de texto", jPanel4);

        jButton1.setText("Ver tamaño de manera gráfica");

        jButton2.setText("Consultar cantidad de almacenamiento disponibe");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jButton1)))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jButton1)
                .addGap(77, 77, 77)
                .addComponent(jButton2)
                .addContainerGap(344, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Disco duro", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        CrearParticion nuevaParticion = new CrearParticion ();
        nuevaParticion.setVisible(true);
        nuevaParticion.setLocationRelativeTo(null);
        nuevaParticion.setDefaultCloseOperation(menuInicial.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        eliminarParticion eliminarParticion = new eliminarParticion ();
        eliminarParticion.setVisible(true);
        eliminarParticion.setLocationRelativeTo(null);
        eliminarParticion.setDefaultCloseOperation(menuInicial.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        modificarParticion modificar = new modificarParticion ();
        modificar.setVisible(true);
        modificar.setLocationRelativeTo(null);
        modificar.setDefaultCloseOperation(menuInicial.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        consultarParticion consultar = new consultarParticion ();
        consultar.setVisible(true);
        consultar.setLocationRelativeTo(null);
        consultar.setDefaultCloseOperation(menuInicial.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
        Scanner commands = new Scanner (System.in);
        System.out.println("Ingrese la accion que desea realizar");
        comando = commands.nextLine();
        
        Scanner nombreP = new Scanner (System.in);
        Scanner nodoP = new Scanner (System.in);
        boolean encontradolista = false;
        NodeAVL direccion;
        switch (comando) {
            //Mueve a carpeta seleccionada
            case "cd":
                System.out.println("Ingrese el nombre de la particion ");
                String particion1 = nombreP.nextLine();
                if (!particion1.equals("")){
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current != null){
                    if(listaParticiones.current.getElement().nombre.equals(particion1)){
                        //AVLTree currentP = prograDos.listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre de la carpeta o archivo ");
                        String busquedaAVL = nodoP.nextLine();
                        NodeAVL docEncontrado = listaParticiones.current.element.arbol.find(busquedaAVL);
                        System.out.print(docEncontrado.toString());
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
                }
                System.out.print ("Ingrese la informacion solicitada");
            //crea nuevo directorio
            case "mkdir":
                System.out.println("Ingrese el nombre de la particion ");
                String particion2 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion2)){
                        //listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre de la carpeta o archivo ");
                        String busquedaAVL = nodoP.nextLine();
                        System.out.println("Ingrese el tamaño del archivo o carpeta");
                        int tamañoIngreso = nodoP.nextInt();
                        Carpetas nuevaCarpeta = new Carpetas (busquedaAVL,tamañoIngreso);
                        listaParticiones.current.element.arbol.addAVL(nuevaCarpeta);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
            //copia nuevo archivo
            case "copy":
                System.out.println("Ingrese el nombre de la particion ");
                String particion3 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion3)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre de la archivo que desea copiar ");
                        String busquedaAVL = nodoP.nextLine();
                        NodeAVL docEncontrado = listaParticiones.current.element.arbol.find(busquedaAVL);
                        System.out.println("Ingrese el nombre de la particion al que desea copiar el archivo ");
                        String nuevaParticion = nombreP.nextLine();
                        listaParticiones.goToStart();
                        listaParticiones.current= listaParticiones.current.getNext();
                        while (listaParticiones.current!=null){
                            if(listaParticiones.current.getElement().nombre.equals(nuevaParticion)){
                                listaParticiones.current.element.arbol.addAVL(docEncontrado);
                                break;
                            }
                        }
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //mueve directorio completo
            //utlizar pila para guardar los elementos
            case "mvdir":
                System.out.println("Ingrese el nombre de la particion ");
                String particion4 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion4)){
                        AVLTree currentP = listaParticiones.current.element.arbol;
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //Elimina un directorio
            case "rmdir":
                System.out.println("Ingrese el nombre de la particion ");
                String particion5 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion5)){
                        AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el directorio que quiere eliminar ");
                        String directorioEliminar = nodoP.nextLine();
                        NodeAVL eliminarNodo = listaParticiones.current.element.arbol.find(directorioEliminar);
                        listaParticiones.current.element.arbol.deleteAllNode(eliminarNodo);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //mueve archivo
            case "move":
                System.out.println("Ingrese el nombre de la particion ");
                String particion6 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion6)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre de la archivo que desea copiar ");
                        String busquedaAVL = nodoP.nextLine();
                        NodeAVL docEncontrado = listaParticiones.current.element.arbol.find(busquedaAVL);
                        listaParticiones.current.element.arbol.delete(docEncontrado);
                        System.out.println("Ingrese el nombre de la particion al que desea copiar el archivo ");
                        String nuevaParticion = nombreP.nextLine();
                        listaParticiones.goToStart();
                        listaParticiones.current= listaParticiones.current.getNext();
                        while (listaParticiones.current!=null){
                            if(listaParticiones.current.getElement().nombre.equals(nuevaParticion)){
                                listaParticiones.current.element.arbol.addAVL(docEncontrado);
                                break;
                            }
                        }
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //imprime arbol en consola
            //revisar el arbol funcion print
            case "tree":
                System.out.println("Ingrese el nombre de la particion ");
                String particion7 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion7)){
                        AVLTree currentP = listaParticiones.current.element.arbol;
                        NodeAVL searchP= listaParticiones.current.element.arbol.find(currentP);
                        listaParticiones.current.element.arbol.printTree(searchP);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //imprime nodos del directorio
            case "dir":
                System.out.println("Ingrese el nombre de la particion ");
                String particion8 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion8)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.print("Ingrese el nombre del directorio que desea imprimir ");
                        String printNode = nodoP.nextLine();
                        NodeAVL searchP= listaParticiones.current.element.arbol.find(printNode);
                        listaParticiones.current.element.arbol.printTree(searchP);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            //crea nuevo file
            case "crfile":
                System.out.println("Ingrese el nombre de la particion ");
                String particion9 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion9)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre que desea darle al archivo");
                        String nombreFile= nodoP.nextLine();
                        System.out.println("Ingrese tamaño que desea otorgarle al archivo");
                        int tamañoFile= nodoP.nextInt();
                        Archivos newFile = new Archivos (nombreFile,tamañoFile);
                        listaParticiones.current.element.arbol.addAVL(newFile);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
                //elimina un archivo
            case "rmfile":
                System.out.println("Ingrese el nombre de la particion ");
                String particion10 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion10)){
                        AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el directorio que quiere eliminar ");
                        String directorioEliminar = nodoP.nextLine();
                        NodeAVL eliminarNodo = listaParticiones.current.element.arbol.find(directorioEliminar);
                        listaParticiones.current.element.arbol.deleteAllNode(eliminarNodo);
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
                //cambia nombre
            case "rename":
                System.out.println("Ingrese el nombre de la particion ");
                String particion11 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion11)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre del archivo que desea renombrar");
                        String nodoBuscar = nodoP.nextLine();
                        NodeAVL nodoEncontrado = listaParticiones.current.element.arbol.find(nodoBuscar);
                        System.out.println("Ingrese el nuevo nombre del nodo que desea ");
                        String nuevoNombre = nodoP.nextLine();
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break;
            case "call":
                System.out.println("Ingrese el nombre de la particion ");
                String particion12 = nombreP.nextLine();
                listaParticiones.goToStart();
                listaParticiones.current=listaParticiones.current.getNext();
                while (listaParticiones.current!=null){
                    if(listaParticiones.current.getElement().nombre.equals(particion12)){
                        //AVLTree currentP = listaParticiones.current.element.arbol;
                        System.out.println("Ingrese el nombre que desea darle al archivo");
                        String nombreFile= nodoP.nextLine();
                        System.out.println("Ingrese tamaño que desea otorgarle al archivo");
                        int tamañoFile= nodoP.nextInt();
                        Archivos newFile = new Archivos (nombreFile,tamañoFile);
                        listaParticiones.current.element.arbol.addAVL(newFile);
                        encontradolista=true;
                        break;
                    }
                    listaParticiones.current = listaParticiones.current.getNext();
                }
                break; 
                //sube a la nube
            case "drive":
                break;
                
            default:
                break;
        } 
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
        Comandos.crfile();
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        Comandos.rename();
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here:
        Comandos.rmfile();
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        Comandos.rmdir();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
        Comandos.drive();
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        Comandos.copy();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        Comandos.move();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        Comandos.mvdir();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
        Comandos.dir();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        Comandos.tree();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
        Comandos.call();
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        // TODO add your handling code here:
        Comandos.mkdir();
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        Grafica nuevaGrafica = new Grafica ();
        nuevaGrafica.setVisible(true);
        nuevaGrafica.setLocationRelativeTo(null);
        nuevaGrafica.setDefaultCloseOperation(menuInicial.HIDE_ON_CLOSE);
        
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuInicial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane4;
    // End of variables declaration//GEN-END:variables
}
